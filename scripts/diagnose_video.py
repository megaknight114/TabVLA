#!/usr/bin/env python3
"""
Video file diagnostic tool.

This script helps diagnose issues with video files generated by the OpenVLA activation visualization.
It checks if the video can be opened, reports codec information, and suggests fixes.

Usage:
    python scripts/diagnose_video.py /path/to/video.mp4
"""

import argparse
import os
import sys

try:
    import cv2
except ImportError:
    print("Error: OpenCV (cv2) is required. Please install with: pip install opencv-python")
    sys.exit(1)


def diagnose_video(video_path: str) -> None:
    """Diagnose video file and provide recommendations."""
    print(f"Diagnosing video file: {video_path}")
    print("=" * 60)
    
    # Check if file exists
    if not os.path.exists(video_path):
        print(f"‚ùå ERROR: File does not exist: {video_path}")
        return
    
    # Check file size
    file_size = os.path.getsize(video_path)
    print(f"üìÅ File size: {file_size:,} bytes ({file_size / (1024*1024):.2f} MB)")
    
    if file_size == 0:
        print("‚ùå ERROR: File is empty (0 bytes)")
        return
    
    # Try to open with OpenCV
    cap = cv2.VideoCapture(video_path)
    
    if not cap.isOpened():
        print("‚ùå ERROR: Cannot open video file with OpenCV")
        print("\nüîß Possible solutions:")
        print("1. Install ffmpeg: sudo apt-get install ffmpeg (Linux) or brew install ffmpeg (macOS)")
        print("2. Try converting the video:")
        basename = os.path.splitext(video_path)[0]
        print(f"   ffmpeg -i {video_path} -c:v libx264 -crf 23 -preset medium {basename}_converted.mp4")
        print("3. Try opening with VLC media player or other robust video players")
        return
    
    # Get video properties
    frame_count = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))
    fps = cap.get(cv2.CAP_PROP_FPS)
    width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
    height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
    fourcc = int(cap.get(cv2.CAP_PROP_FOURCC))
    
    # Convert fourcc to string
    fourcc_str = "".join([chr((fourcc >> 8 * i) & 0xFF) for i in range(4)])
    
    print("‚úÖ Video can be opened by OpenCV")
    print(f"üì∫ Resolution: {width} x {height}")
    print(f"üé¨ Frame count: {frame_count}")
    print(f"‚è±Ô∏è  Frame rate: {fps:.2f} FPS")
    print(f"üé• Codec (FourCC): {fourcc_str} ({fourcc})")
    
    if frame_count > 0:
        duration = frame_count / fps if fps > 0 else 0
        print(f"‚è∞ Duration: {duration:.2f} seconds")
    
    # Try to read first frame
    ret, frame = cap.read()
    if ret:
        print("‚úÖ Can read frames successfully")
        print(f"üì∑ First frame shape: {frame.shape}")
    else:
        print("‚ùå WARNING: Cannot read frames from video")
    
    cap.release()
    
    # Additional recommendations
    print("\nüí° Recommendations:")
    if fps == 0:
        print("- Frame rate is 0, which may cause playback issues")
    if frame_count == 0:
        print("- No frames detected in video")
    if fourcc_str.strip() == '':
        print("- Unknown or problematic codec detected")
    
    print("- If video doesn't play in your preferred player, try VLC media player")
    print("- For web compatibility, consider converting to H.264 format")


def main():
    parser = argparse.ArgumentParser(description="Diagnose video file issues")
    parser.add_argument("video", help="Path to video file to diagnose")
    args = parser.parse_args()
    
    diagnose_video(args.video)


if __name__ == "__main__":
    main()